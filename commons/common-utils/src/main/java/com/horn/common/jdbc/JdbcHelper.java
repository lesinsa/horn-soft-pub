package com.horn.common.jdbc;

import org.slf4j.LoggerFactory;

import javax.sql.DataSource;
import java.math.BigDecimal;
import java.sql.*;

/**
 * @author lesinsa
 */
public final class JdbcHelper {
    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(JdbcHelper.class);

    private JdbcHelper() {
        // nothing to do
    }

    public static void setInt(PreparedStatement stmt, int parameterIndex, Integer value) throws SQLException {
        if (value != null) {
            stmt.setInt(parameterIndex, value);
        } else {
            stmt.setNull(parameterIndex, Types.INTEGER);
        }
    }

    public static void setString(PreparedStatement stmt, int parameterIndex, String value) throws SQLException {
        if (value != null) {
            stmt.setString(parameterIndex, value);
        } else {
            stmt.setNull(parameterIndex, Types.VARCHAR);
        }
    }

    public static void setBigDecimal(PreparedStatement stmt, int parameterIndex, BigDecimal value) throws SQLException {
        if (value != null) {
            stmt.setBigDecimal(parameterIndex, value);
        } else {
            stmt.setNull(parameterIndex, Types.DECIMAL);
        }
    }

    public static void setDate(PreparedStatement stmt, int parameterIndex, Date value) throws SQLException {
        if (value != null) {
            stmt.setDate(parameterIndex, value);
        } else {
            stmt.setNull(parameterIndex, Types.DATE);
        }
    }

    public static void setTimestamp(PreparedStatement stmt, int parameterIndex, Timestamp value) throws SQLException {
        if (value != null) {
            stmt.setTimestamp(parameterIndex, value);
        } else {
            stmt.setNull(parameterIndex, Types.TIMESTAMP);
        }
    }

    public static Integer getInt(ResultSet rs, String columnLabel) throws SQLException {
        int result = rs.getInt(columnLabel);
        // проверяем на null
        if (result == 0 && rs.getObject(columnLabel) == null) {
            return null;
        }
        return result;
    }

    public static Integer getInt(ResultSet rs, int columnIndex) throws SQLException {
        int result = rs.getInt(columnIndex);
        // проверяем на null
        if (result == 0 && rs.getObject(columnIndex) == null) {
            return null;
        }
        return result;
    }

    public static void setInt(CallableStatement cs, String parameterLabel, Integer value) throws SQLException {
        if (value != null) {
            cs.setInt(parameterLabel, value);
        } else {
            cs.setNull(parameterLabel, Types.INTEGER);
        }
    }

    public static void setString(CallableStatement cs, String parameterLabel, String value) throws SQLException {
        if (value != null) {
            cs.setString(parameterLabel, value);
        } else {
            cs.setNull(parameterLabel, Types.VARCHAR);
        }
    }

    public static void setBoolean(PreparedStatement stmt, int parameterIndex, Boolean value) throws SQLException {
        if (value != null) {
            stmt.setBoolean(parameterIndex, value);
        } else {
            stmt.setNull(parameterIndex, Types.BOOLEAN);
        }
    }

    public static void setBytes(PreparedStatement stmt, int parameterIndex, byte[] value) throws SQLException {
        if (value != null) {
            stmt.setBytes(parameterIndex, value);
        } else {
            stmt.setNull(parameterIndex, Types.BLOB);
        }
    }

    public static <T> T executeSql(DataSource dataSource, String sql, ExecSql<T> ex) {
        return executeSql(dataSource, sql, ex, false);
    }

    public static <T> T executeSql(DataSource dataSource, String sql, ExecSql<T> ex, boolean autoGenerated) {
        try {
            Connection connection = dataSource.getConnection();
            return executeSql(connection, sql, ex, autoGenerated);
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }

    public static <T> T executeSql(Connection connection, String sql, ExecSql<T> ex) throws SQLException {
        return executeSql(connection, sql, ex, false);
    }

    public static <T> T executeSql(Connection connection, String sql, ExecSql<T> ex, boolean autoGenerated) throws SQLException {
        PreparedStatement stmt;
        if (!autoGenerated) {
            stmt = connection.prepareStatement(sql);
        } else {
            stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
        }
        try {
            return ex.exec(stmt);
        } finally {
            closeQuitely(stmt);
        }
    }

    public static <T> T executeSybaseSP(DataSource dataSource, String sql, ExecSP<T> ex) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                CallableStatement stmt = null;
                try {
                    // лечим хрень с chained mode
                    statement.execute("set chained off");
                    stmt = connection.prepareCall(sql);
                    return ex.exec(stmt);
                } finally {
                    closeQuitely(stmt);
                    closeQuitely(statement);
                }
            } finally {
                closeQuitely(connection);
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }


    private static void closeQuitely(Statement statement) throws SQLException {
        try {
            if (statement != null) {
                statement.close();
            }
        } catch (Exception e) {
            LOG.debug("", e);
        }
    }

    private static void closeQuitely(Connection connection) throws SQLException {
        try {
            if (connection != null) {
                connection.close();
            }
        } catch (Exception e) {
            LOG.debug("", e);
        }
    }
}
